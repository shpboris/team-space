1.
Teamspace application

1.1)
Run Teamspace application from command line:
java -Ddw.server.applicationConnectors[1].keyStorePath=./keys/keystore.jks -jar team-space-server-1.0-SNAPSHOT.jar server config.yml

If remote debug option is needed, use this:
java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -Ddw.server.applicationConnectors[1].keyStorePath=./keys/keystore.jks -jar team-space-server-1.0-SNAPSHOT.jar server config.yml

1.2)
FS layout:
--any-root-folder
    --tss-start.bat (this file includes the single command above to run the application)
    --team-space-server-1.0-SNAPSHOT.jar
    --config.yml
    --keys
      --keystore.jks

1.3)
To run on Windows use:
server\team-space-server\src\main\resources\scripts\tss-start.bat

1.4)
To get an H2 console client use the following instruction from the folder where team-space-server-1.0-SNAPSHOT.jar is located:
java -cp team-space-server-1.0-SNAPSHOT.jar org.h2.tools.Shell -url jdbc:h2:tcp://localhost/~/teamspace -user admin -password admin

This works from either Windows or Linux

1.5)
To access a MySql DB on Windows from regular console use -
"C:\Program Files\MySQL\MySQL Server 5.6\bin\mysql.exe" "--defaults-file=C:\ProgramData\MySQL\MySQL Server 5.6\my.ini" "-uts" "-pts111"

1.6)
To access MySql DB on CentOS app instance from console, use -
mysql -u ts -h ip-10-0-1-247.eu-central-1.compute.internal teamspace -pts111

Options are -u, -h, -p. Pay attention password (ts111) should follow -p without space.
Database name (teamspace) just follows the host without any special option.

1.7)
Swagger UI can be accessed at http://localhost:80/api-doc or https://localhost:443/api-doc

1.8)
The TeamSpace PKCS keystore configuration for HTTPS doesn't work with Java that is configured
with security enhancements (that are required for CDRA). So application startup fails. In order to overcome this, edit
C:\Program Files\Java\jdk1.8.0_151\jre\lib\security\java.security file and return it to its
unchanged original (pre extra-secured) version. Both original java.security file and its enhanced version
java.security-enhanced can be found in current project at
C:\team-space\server\team-space-server\src\main\resources



2.
Automation

2.1)
Run TestNG automation against Teamspace application:
java -cp team-space-automation-1.0-SNAPSHOT.jar org.testng.TestNG testng.xml

2.2)
FS layout:

--any-root-folder
    --tsa-start.bat (this file includes the single command above to run the application)
    --team-space-automation-1.0-SNAPSHOT.jar

2.3)
To run on Windows use:
automation\team-space-automation\src\main\resources\scripts\tsa-start.bat

3.
Deploy

3.1
To run deploy application:
java -jar team-space-deploy-server-1.5.2.RELEASE.jar

3.2
Swagger UI can be accessed on http://localhost:9999/rest/swagger-ui.html

3.3
Deploy request body examples

Azure deploy

{
"cloudType" : "AZURE_CLOUD_TYPE",
  "artifactName": "team-space",
  "envTag": "TS1",
  "region": "eastus",
"user" : "ts",
"password" : "Password01!",
"dbMode" : "AZ_MYSQL"
}

Azure undeploy

{
  "cloudType" : "AZURE_CLOUD_TYPE",
  "deleteArtifact": false,
  "envTag": "TS1",
  "region": "eastus"
}


3.3.0
Oregon enterprise mode

{
  "singleStackDeployment": true,
  "instancesCount": 2,
  "artifactName": "team-space",
  "envTag": "TS1",
  "region": "us-west-2",
  "user" : "ts",
  "password" : "ts111222"
}

3.3.1
Oregon

{
  "artifactName": "team-space",
  "envTag": "TS1",
  "region": "us-west-2",
"user" : "ts",
"password" : "ts111222",
"dbMode" : "RDS"
}

3.3.2
Frankfurt

{
  "artifactName": "team-space",
  "envTag": "TS2",
  "region": "eu-central-1",
"user" : "ts",
"password" : "ts111222",
"dbMode" : "MYSQL"
}

3.3.3
Ohio

{
  "artifactName": "team-space",
  "envTag": "TS4",
"region": "us-east-2",
"user" : "ts",
"password" : "ts111222",
"dbMode" : "H2"
}

3.4.
The deployable artifact team-space.tar.gz will be created by Maven assembly plugin
when Maven "package" goal is performed on team-space-server project.
The location of the resulting artifact will
be C:\team-space\server\team-space-server\target\team-space.tar.gz. That is exactly where
TeamSpaceDeployApplication expects it to be - so NO additional copying is required. Just run deploy.

The content of team-space.tar.gz should be:

    -data-import                                -- includes JSON files for Spring Batch to import
    -keys                                       -- SSH related keys
    -config.yml                                 -- dropwizard config
    -setup.sh                                   -- team space custom script
    -team-space                                 -- systemd env vars
    -team-space.service                         -- systemd unit
    -team-space-server-1.0-SNAPSHOT.jar         -- JAR file


3.5
CR/CRLF issue with user data scripts

When passing user data scripts to Cloud Formation, in my case CF eventually
executes them on Linux. So line endings should be Unix style - not Windows style.
Meaning, LF instead of CRLF. Otherwise script will fail.

Few scenarios around this issue:

1)
When running deploy in RDS mode, user_data.sh and db_user_data_.sh scripts run just fine
without any issues (despite having CRLF line endings on my local Windows).
Probably, CF makes optimization and converts CRLF to LF

2)
When running deploy in enterprise mode (singleStackDeployment = true flavour) the script is constructed on the fly from initial_user_data.sh
and few other bash instructions (see aws-network-rds-instances). In such scenario, optimization from 1)
above doesn't happen so script fails ! in order to fix it, always change line endings of
initial_user_data.sh file to LF in intellij/eclipse.

When enterprise mode is used with singleStackDeployment = false, full user_data.sh is used
so optimization explained in 1) happens and all works fine. I.e no need to change any line endings.

3)
When trying to invoke any CF template from AWS UI, line endings AND other special characters in user data scripts
are not handled correctly by either browser or HTTP layer. So the way to resolve the problem is to change
the user data line ending to LF AND do base 64 encoding in Notepad++. Then use the resulting string as
user data in CF template as now it doesn't include any problematic characters.


